# Archivo: docker-compose.yml
# Ubicacion: raÃ­z del proyecto tpgateway

version: '3.9'

services:
  # MongoDB para facturas
  mongo:
    image: mongo
    container_name: mongo
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      retries: 30
    networks:
      - backend

  mongo-init:
    image: mongo
    depends_on:
      - mongo
    entrypoint: >
      bash -c "
        sleep 5 &&
        echo 'Initiating ReplicaSet...' &&
        mongosh --host mongo:27017 --eval '
          try {
            rs.initiate({
              _id: \"rs0\",
              members: [{ _id: 0, host: \"mongo:27017\" }]
            })
          } catch(e) {
            print(\"ReplicaSet already initialized\")
          }
        '
      "
    networks:
      - backend

  # MySQL para usuarios
  mysql:
    image: mysql:8
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: tpgateway
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # PostgreSQL para productos
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: tpgateway
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  # Microservicio de usuarios
  users-ms:
    build: ./users-ms
    container_name: users-ms
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      HOST: 0.0.0.0
      PORT: 3001
      DB_PORT: 3306
      DB_HOST: mysql
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_DATABASE: tpgateway
    networks:
      - backend

  # Microservicio de productos
  products-ms:
    build: ./products-ms
    container_name: products-ms
    depends_on:
      - postgres
    environment:
      HOST: 0.0.0.0
      PORT: 3002
      DB_PORT: 5432
      DB_HOST: postgres
      DB_USERNAME: postgres
      DB_PASSWORD: root
      DB_DATABASE: tpgateway
      DB_URL: postgresql://postgres:root@postgres:5432/tpgateway
    networks:
      - backend

  # Microservicio de facturas
  invoices-ms:
    build: ./invoices-ms
    container_name: invoices-ms
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      HOST: 0.0.0.0
      PORT: 3003
      DB_HOST: mongo
      DB_PORT: 27017
      DB_URL: mongodb://mongo:27017/facturas_db?replicaSet=rs0
    networks:
      - backend

  # Gateway
  gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "3000:3000"
    depends_on:
      - users-ms
      - products-ms
      - invoices-ms
    environment:
      PORT: 3000
      MS_USER_HOST: users-ms
      MS_USER_PORT: 3001
      MS_PRODUCTS_HOST: products-ms
      MS_PRODUCTS_PORT: 3002
      MS_INVOICE_HOST: invoices-ms
      MS_INVOICE_PORT: 3003
    networks:
      - backend

volumes:
  mongo_data:
  mongo_config:
  mysql_data:
  postgres_data:

networks:
  backend:
    driver: bridge
